{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { first } from 'rxjs/operators';\nlet UsersOnlineComponent = class UsersOnlineComponent {\n  constructor(accountService, socketService) {\n    this.accountService = accountService;\n    this.socketService = socketService;\n    this.accounts = [];\n    this.loading = true;\n    this.currentPage = 1;\n    this.itemsPerPage = 5;\n    this.totalPages = 1;\n    this.Math = Math; // Make Math available in template\n  }\n\n  ngOnInit() {\n    this.loadAccounts();\n    this.setupSocketListeners();\n  }\n  ngOnDestroy() {\n    if (this.socketSubscription) {\n      this.socketSubscription.unsubscribe();\n    }\n    if (this.statusUpdatesSubscription) {\n      this.statusUpdatesSubscription.unsubscribe();\n    }\n  }\n  loadAccounts() {\n    this.loading = true;\n    this.accountService.getAll().pipe(first()).subscribe({\n      next: accounts => {\n        // Sort accounts to show online users first\n        this.accounts = accounts.sort((a, b) => {\n          if (a.isOnline && !b.isOnline) return -1;\n          if (!a.isOnline && b.isOnline) return 1;\n          return 0;\n        });\n        this.totalPages = Math.ceil(this.accounts.length / this.itemsPerPage);\n        this.loading = false;\n      },\n      error: error => {\n        console.error('Error loading accounts:', error);\n        this.loading = false;\n      }\n    });\n  }\n  setupSocketListeners() {\n    // Listen for user status updates\n    this.socketSubscription = this.socketService.getUserStatusUpdates().subscribe(update => {\n      const account = this.accounts.find(a => a.id === update.userId);\n      if (account) {\n        account.isOnline = update.isOnline;\n        // Re-sort accounts to maintain online users first\n        this.accounts.sort((a, b) => {\n          if (a.isOnline && !b.isOnline) return -1;\n          if (!a.isOnline && b.isOnline) return 1;\n          return 0;\n        });\n      }\n    });\n  }\n  get paginatedAccounts() {\n    const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n    return this.accounts.slice(startIndex, startIndex + this.itemsPerPage);\n  }\n  nextPage() {\n    if (this.currentPage < this.totalPages) {\n      this.currentPage++;\n    }\n  }\n  previousPage() {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n    }\n  }\n  // Helper methods for the template\n  getOnlineUsersCount() {\n    return this.accounts.filter(a => a.isOnline).length;\n  }\n  getOfflineUsersCount() {\n    return this.accounts.filter(a => !a.isOnline).length;\n  }\n  getTotalUsersCount() {\n    return this.accounts.length;\n  }\n  isAdminRole(role) {\n    return role === 'Admin';\n  }\n  isUserRole(role) {\n    return role === 'User';\n  }\n};\nUsersOnlineComponent = __decorate([Component({\n  selector: 'app-users-online',\n  templateUrl: 'users-online.component.html'\n})], UsersOnlineComponent);\nexport { UsersOnlineComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}