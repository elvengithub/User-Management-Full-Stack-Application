{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { MustMatch } from '../../app/_helpers';\nlet RegisterComponent = class RegisterComponent {\n  constructor(formBuilder, route, router, accountService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.accountService = accountService;\n    this.alertService = alertService;\n    this.loading = false;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      title: ['', Validators.required],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required],\n      acceptTerms: [false, Validators.requiredTrue]\n    }, {\n      validator: MustMatch('password', 'confirmPassword')\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // reset alerts on submit\n    this.alertService.clear();\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.accountService.register(this.form.value).pipe(first()).subscribe({\n      next: response => {\n        this.alertService.success(response.message || 'Registration successful', {\n          keepAfterRouteChange: true\n        });\n        this.router.navigate(['../login'], {\n          relativeTo: this.route\n        });\n      },\n      error: error => {\n        var _a;\n        // Extract meaningful error message\n        let errorMessage = typeof error === 'string' ? error : 'Registration failed';\n        // Check if it's an email-related error and highlight the email field\n        if (errorMessage.toLowerCase().includes('email') && errorMessage.toLowerCase().includes('already registered')) {\n          (_a = this.form.get('email')) === null || _a === void 0 ? void 0 : _a.setErrors({\n            alreadyRegistered: true\n          });\n          // Don't show alert for email errors, as we're displaying inline\n        } else {\n          // Only show alert for non-email related errors\n          this.alertService.error(errorMessage);\n        }\n        this.loading = false;\n      }\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  templateUrl: 'register.component.html'\n})], RegisterComponent);\nexport { RegisterComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}