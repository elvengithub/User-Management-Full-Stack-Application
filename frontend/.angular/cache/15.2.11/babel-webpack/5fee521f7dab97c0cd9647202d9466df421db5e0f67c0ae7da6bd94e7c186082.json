{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../_services\";\nimport * as i2 from \"../../_services/socket.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nconst _c0 = [\"usersChart\"];\nconst _c1 = [\"tokenChart\"];\nfunction DashboardComponent_div_68_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 51)(1, \"div\", 52)(2, \"span\", 53);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction DashboardComponent_div_111_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 51)(1, \"div\", 52)(2, \"span\", 53);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(accountService, socketService) {\n      this.accountService = accountService;\n      this.socketService = socketService;\n      this.totalUsers = 0;\n      this.activeUsers = 0;\n      this.onlineUsers = 0;\n      this.verifiedUsers = 0;\n      this.monthlyRegistrations = [];\n      this.refreshTokens = 0;\n      this.loading = true;\n      this.subscriptions = [];\n    }\n    ngOnInit() {\n      this.loadStats();\n      // Connect to \"socket\"\n      this.socketService.connect();\n      // Subscribe to real-time updates\n      this.subscriptions.push(this.socketService.getOnlineUsers().subscribe(users => {\n        if (users.length > 0) {\n          this.onlineUsers = users.filter(u => u.isOnline).length;\n          // Update the chart if it exists\n          this.updateCharts();\n        }\n      }));\n    }\n    ngAfterViewInit() {\n      setTimeout(() => this.initCharts(), 500);\n    }\n    ngOnDestroy() {\n      // Disconnect socket\n      this.socketService.disconnect();\n      // Unsubscribe from all subscriptions\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n    loadStats() {\n      this.accountService.getUserStats().pipe(first()).subscribe(stats => {\n        this.totalUsers = stats.totalUsers;\n        this.activeUsers = stats.activeUsers;\n        this.onlineUsers = stats.onlineUsers;\n        this.verifiedUsers = stats.verifiedUsers;\n        this.refreshTokens = stats.refreshTokenCount;\n        this.monthlyRegistrations = stats.monthlyData;\n        // Initialize socket service with user data\n        this.accountService.getOnlineUsers().pipe(first()).subscribe(users => {\n          this.socketService.updateOnlineUsers(users);\n          // Update registration stats in socket service\n          this.socketService.updateRegistrationStats({\n            monthlyData: this.monthlyRegistrations,\n            totalRegistrations: this.totalUsers\n          });\n        });\n        this.loading = false;\n        // Initialize charts after data is loaded\n        this.initCharts();\n      });\n    }\n    initCharts() {\n      if (this.usersChartRef && this.usersChartRef.nativeElement) {\n        const ctx = this.usersChartRef.nativeElement.getContext('2d');\n        // Create a gradient background for the line\n        const gradient = ctx.createLinearGradient(0, 0, 0, 400);\n        gradient.addColorStop(0, 'rgba(54, 162, 235, 0.7)');\n        gradient.addColorStop(1, 'rgba(54, 162, 235, 0.1)');\n        this.usersChart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: this.monthlyRegistrations.map(item => item.month),\n            datasets: [{\n              label: 'New Users',\n              data: this.monthlyRegistrations.map(item => item.count),\n              backgroundColor: gradient,\n              borderColor: 'rgba(54, 162, 235, 1)',\n              borderWidth: 2,\n              pointBackgroundColor: this.monthlyRegistrations.map(item => item.isCurrent ? 'rgba(54, 162, 235, 1)' : 'rgba(54, 162, 235, 0.7)'),\n              pointRadius: this.monthlyRegistrations.map(item => item.isCurrent ? 5 : 3),\n              tension: 0.4,\n              fill: true\n            }]\n          },\n          options: {\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                enabled: true,\n                mode: 'index',\n                intersect: false,\n                backgroundColor: 'rgba(0, 0, 0, 0.7)',\n                titleColor: '#fff',\n                bodyColor: '#fff',\n                titleFont: {\n                  size: 14\n                },\n                bodyFont: {\n                  size: 14\n                },\n                padding: 12,\n                displayColors: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                grid: {\n                  color: 'rgba(200, 200, 200, 0.1)'\n                },\n                ticks: {\n                  color: '#6c757d'\n                }\n              },\n              x: {\n                grid: {\n                  display: false\n                },\n                ticks: {\n                  color: '#6c757d'\n                }\n              }\n            },\n            responsive: true,\n            maintainAspectRatio: false\n          }\n        });\n      }\n      if (this.tokenChartRef && this.tokenChartRef.nativeElement) {\n        const ctx = this.tokenChartRef.nativeElement.getContext('2d');\n        this.tokensChart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: ['Active Sessions', 'Inactive'],\n            datasets: [{\n              data: [this.refreshTokens, this.totalUsers - this.refreshTokens],\n              backgroundColor: ['rgba(54, 162, 235, 0.8)', 'rgba(220, 220, 220, 0.8)'],\n              borderColor: ['rgba(54, 162, 235, 1)', 'rgba(220, 220, 220, 1)'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            plugins: {\n              legend: {\n                position: 'bottom',\n                labels: {\n                  padding: 20,\n                  boxWidth: 12,\n                  color: '#6c757d'\n                }\n              }\n            },\n            cutout: '70%',\n            responsive: true,\n            maintainAspectRatio: false\n          }\n        });\n      }\n    }\n    updateCharts() {\n      if (this.tokensChart) {\n        // Update the active sessions data\n        this.tokensChart.data.datasets[0].data = [this.refreshTokens, this.totalUsers - this.refreshTokens];\n        this.tokensChart.update();\n      }\n    }\n  }\n  DashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.SocketService));\n  };\n  DashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    viewQuery: function DashboardComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.usersChartRef = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tokenChartRef = _t.first);\n      }\n    },\n    decls: 123,\n    vars: 10,\n    consts: [[1, \"container-fluid\"], [1, \"row\", \"mb-4\"], [1, \"col-12\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"mb-0\", \"fs-4\"], [1, \"fw-bold\"], [1, \"btn\", \"btn-outline-primary\", \"rounded-pill\", \"btn-sm\", 3, \"click\"], [1, \"fas\", \"fa-sync-alt\", \"me-1\"], [1, \"col-xl-3\", \"col-md-6\", \"mb-3\"], [1, \"card\", \"border-0\", \"rounded-3\", \"shadow-sm\"], [1, \"card-body\", \"p-3\"], [1, \"d-flex\", \"align-items-center\"], [1, \"me-auto\"], [1, \"text-muted\", \"small\", \"mb-1\"], [1, \"icon-shape\", \"bg-primary\", \"text-white\", \"rounded-3\", \"p-3\"], [1, \"fas\", \"fa-users\"], [1, \"icon-shape\", \"bg-success\", \"text-white\", \"rounded-3\", \"p-3\"], [1, \"fas\", \"fa-user-check\"], [1, \"icon-shape\", \"bg-info\", \"text-white\", \"rounded-3\", \"p-3\"], [1, \"fas\", \"fa-wifi\"], [1, \"icon-shape\", \"bg-warning\", \"text-white\", \"rounded-3\", \"p-3\"], [1, \"fas\", \"fa-shield-alt\"], [1, \"row\"], [1, \"col-xl-4\", \"col-lg-5\", \"mb-4\"], [1, \"card\", \"shadow-sm\", \"border-0\", \"rounded-3\", \"h-100\"], [1, \"card-header\", \"bg-white\", \"border-0\", \"pt-3\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"mb-0\", \"text-dark\"], [1, \"card-body\"], [\"class\", \"d-flex justify-content-center py-5\", 4, \"ngIf\"], [1, \"row\", \"g-3\"], [1, \"col-6\"], [1, \"card\", \"border-0\", \"bg-light\", \"py-3\"], [1, \"card-body\", \"text-center\", \"p-2\"], [1, \"mb-1\", \"text-primary\"], [1, \"mb-0\", \"small\", \"text-muted\"], [1, \"mb-1\", \"text-success\"], [1, \"mb-1\", \"text-warning\"], [1, \"mb-1\", \"text-danger\"], [1, \"col-12\", \"mt-3\"], [\"routerLink\", \"users-online\", 1, \"btn\", \"btn-outline-primary\", \"btn-sm\", \"w-100\", \"rounded-pill\"], [1, \"fas\", \"fa-users\", \"me-2\"], [1, \"chart-pie\", \"mt-4\", 2, \"height\", \"200px\"], [\"tokenChart\", \"\"], [1, \"col-xl-8\", \"col-lg-7\", \"mb-4\"], [1, \"chart-area\", 2, \"height\", \"350px\"], [\"usersChart\", \"\"], [1, \"card-footer\", \"border-0\", \"bg-white\", \"py-3\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\", \"small\"], [1, \"text-muted\"], [1, \"badge\", \"bg-primary-subtle\", \"text-primary\", \"rounded-pill\", \"px-3\", \"py-1\"], [1, \"fas\", \"fa-circle\", \"me-1\"], [1, \"d-flex\", \"justify-content-center\", \"py-5\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h1\", 4)(5, \"span\", 5);\n        i0.ɵɵtext(6, \"Analytics\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(7, \" Dashboard \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\")(9, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_9_listener() {\n          return ctx.loadStats();\n        });\n        i0.ɵɵelement(10, \"i\", 7);\n        i0.ɵɵtext(11, \" Refresh \");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(12, \"div\", 1)(13, \"div\", 8)(14, \"div\", 9)(15, \"div\", 10)(16, \"div\", 11)(17, \"div\", 12)(18, \"div\", 13);\n        i0.ɵɵtext(19, \"Total Users\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 11)(21, \"h3\", 4);\n        i0.ɵɵtext(22);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(23, \"div\", 14);\n        i0.ɵɵelement(24, \"i\", 15);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(25, \"div\", 8)(26, \"div\", 9)(27, \"div\", 10)(28, \"div\", 11)(29, \"div\", 12)(30, \"div\", 13);\n        i0.ɵɵtext(31, \"Active Users\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\", 11)(33, \"h3\", 4);\n        i0.ɵɵtext(34);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(35, \"div\", 16);\n        i0.ɵɵelement(36, \"i\", 17);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(37, \"div\", 8)(38, \"div\", 9)(39, \"div\", 10)(40, \"div\", 11)(41, \"div\", 12)(42, \"div\", 13);\n        i0.ɵɵtext(43, \"Online Users\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"div\", 11)(45, \"h3\", 4);\n        i0.ɵɵtext(46);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(47, \"div\", 18);\n        i0.ɵɵelement(48, \"i\", 19);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(49, \"div\", 8)(50, \"div\", 9)(51, \"div\", 10)(52, \"div\", 11)(53, \"div\", 12)(54, \"div\", 13);\n        i0.ɵɵtext(55, \"Verified Users\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(56, \"div\", 11)(57, \"h3\", 4);\n        i0.ɵɵtext(58);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(59, \"div\", 20);\n        i0.ɵɵelement(60, \"i\", 21);\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelementStart(61, \"div\", 22)(62, \"div\", 23)(63, \"div\", 24)(64, \"div\", 25)(65, \"h6\", 26);\n        i0.ɵɵtext(66, \"User Activity\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(67, \"div\", 27);\n        i0.ɵɵtemplate(68, DashboardComponent_div_68_Template, 4, 0, \"div\", 28);\n        i0.ɵɵelementStart(69, \"div\", 29)(70, \"div\", 30)(71, \"div\", 31)(72, \"div\", 32)(73, \"h5\", 33);\n        i0.ɵɵtext(74);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(75, \"p\", 34);\n        i0.ɵɵtext(76, \"Active Users\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(77, \"div\", 30)(78, \"div\", 31)(79, \"div\", 32)(80, \"h5\", 35);\n        i0.ɵɵtext(81);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(82, \"p\", 34);\n        i0.ɵɵtext(83, \"Online Now\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(84, \"div\", 30)(85, \"div\", 31)(86, \"div\", 32)(87, \"h5\", 36);\n        i0.ɵɵtext(88);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(89, \"p\", 34);\n        i0.ɵɵtext(90, \"Verified\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(91, \"div\", 30)(92, \"div\", 31)(93, \"div\", 32)(94, \"h5\", 37);\n        i0.ɵɵtext(95);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(96, \"p\", 34);\n        i0.ɵɵtext(97, \"Active Sessions\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(98, \"div\", 38)(99, \"a\", 39);\n        i0.ɵɵelement(100, \"i\", 40);\n        i0.ɵɵtext(101, \"View Online Users \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(102, \"div\", 41);\n        i0.ɵɵelement(103, \"canvas\", null, 42);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(105, \"div\", 43)(106, \"div\", 24)(107, \"div\", 25)(108, \"h6\", 26);\n        i0.ɵɵtext(109, \"User Registration Overview\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(110, \"div\", 27);\n        i0.ɵɵtemplate(111, DashboardComponent_div_111_Template, 4, 0, \"div\", 28);\n        i0.ɵɵelementStart(112, \"div\", 44);\n        i0.ɵɵelement(113, \"canvas\", null, 45);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(115, \"div\", 46)(116, \"div\", 47)(117, \"div\", 48);\n        i0.ɵɵtext(118, \"Updated in real-time\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(119, \"div\")(120, \"span\", 49);\n        i0.ɵɵelement(121, \"i\", 50);\n        i0.ɵɵtext(122, \"Active \");\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(22);\n        i0.ɵɵtextInterpolate(ctx.totalUsers);\n        i0.ɵɵadvance(12);\n        i0.ɵɵtextInterpolate(ctx.activeUsers);\n        i0.ɵɵadvance(12);\n        i0.ɵɵtextInterpolate(ctx.onlineUsers);\n        i0.ɵɵadvance(12);\n        i0.ɵɵtextInterpolate(ctx.verifiedUsers);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx.activeUsers);\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate(ctx.onlineUsers);\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate(ctx.verifiedUsers);\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate(ctx.refreshTokens);\n        i0.ɵɵadvance(16);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      }\n    },\n    dependencies: [i3.NgIf, i4.RouterLink],\n    encapsulation: 2\n  });\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}