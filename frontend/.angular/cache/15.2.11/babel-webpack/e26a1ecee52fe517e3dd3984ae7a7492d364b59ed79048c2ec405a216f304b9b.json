{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../app/_services\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(accountService) {\n      this.accountService = accountService;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        var _a;\n        if (err instanceof HttpErrorResponse) {\n          if ([401, 403].includes(err.status)) {\n            // Only logout if not a refresh token request\n            if (!request.url.includes('/refresh-token') && this.accountService.accountValue) {\n              this.accountService.logout();\n            }\n          }\n          const error = ((_a = err.error) === null || _a === void 0 ? void 0 : _a.message) || err.statusText || 'An error occurred';\n          console.error('API Error:', err);\n          return throwError(() => error);\n        }\n        console.error('Unknown Error:', err);\n        return throwError(() => 'An unknown error occurred');\n      }));\n    }\n  }\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AccountService));\n  };\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}