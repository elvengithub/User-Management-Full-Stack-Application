{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { first } from 'rxjs/operators';\nlet UsersOnlineComponent = class UsersOnlineComponent {\n  constructor(accountService, socketService) {\n    this.accountService = accountService;\n    this.socketService = socketService;\n    this.accounts = [];\n    this.loading = true;\n  }\n  ngOnInit() {\n    // Initial load of users\n    this.loadUsers();\n    // Connect to socket service if not already connected\n    this.socketService.connect();\n    // Subscribe to socket service for real-time updates on all users\n    this.socketSubscription = this.socketService.getOnlineUsers().subscribe(users => {\n      if (users && users.length > 0) {\n        this.accounts = users;\n        this.loading = false;\n      }\n    });\n    // Subscribe to individual user status updates\n    this.statusUpdatesSubscription = this.socketService.getUserStatusUpdates().subscribe(update => {\n      // Update the status of the specific user\n      this.accounts = this.accounts.map(user => {\n        if (user.id === update.userId) {\n          return Object.assign(Object.assign({}, user), {\n            isOnline: update.isOnline\n          });\n        }\n        return user;\n      });\n    });\n  }\n  ngOnDestroy() {\n    if (this.socketSubscription) {\n      this.socketSubscription.unsubscribe();\n    }\n    if (this.statusUpdatesSubscription) {\n      this.statusUpdatesSubscription.unsubscribe();\n    }\n  }\n  loadUsers() {\n    this.accountService.getOnlineUsers().pipe(first()).subscribe({\n      next: accounts => {\n        this.accounts = accounts;\n        this.loading = false;\n        // Update socket service with latest data\n        this.socketService.updateOnlineUsers(accounts);\n      },\n      error: error => {\n        console.error('Error loading online users:', error);\n        this.loading = false;\n      }\n    });\n  }\n  // Helper methods for the template\n  getOnlineUsersCount() {\n    return this.accounts.filter(a => a.isOnline).length;\n  }\n  getOfflineUsersCount() {\n    return this.accounts.filter(a => !a.isOnline).length;\n  }\n  getTotalUsersCount() {\n    return this.accounts.length;\n  }\n  isAdminRole(role) {\n    return role === 'Admin';\n  }\n  isUserRole(role) {\n    return role === 'User';\n  }\n};\nUsersOnlineComponent = __decorate([Component({\n  selector: 'app-users-online',\n  templateUrl: 'users-online.component.html'\n})], UsersOnlineComponent);\nexport { UsersOnlineComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}