{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(accountService) {\n      this.accountService = accountService;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(error => {\n        var _a, _b, _c;\n        if ([401, 403].includes(error.status)) {\n          // If the error is due to authentication/authorization\n          if (error.status === 401 && !request.url.includes('authenticate')) {\n            // Auto logout if 401 response returned from api and not a login request\n            this.accountService.logout();\n          }\n          const errorMessage = ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || 'Unauthorized access';\n          return throwError(() => new Error(errorMessage));\n        }\n        if (error.status === 404) {\n          return throwError(() => new Error('Resource not found'));\n        }\n        if (error.status === 400) {\n          // Handle validation errors\n          if ((_b = error.error) === null || _b === void 0 ? void 0 : _b.errors) {\n            const validationErrors = Object.values(error.error.errors).join(', ');\n            return throwError(() => new Error(validationErrors));\n          }\n          return throwError(() => {\n            var _a;\n            return new Error(((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) || 'Bad request');\n          });\n        }\n        // Handle network errors\n        if (error.status === 0) {\n          return throwError(() => new Error('Network error. Please check your connection and try again.'));\n        }\n        // Handle server errors\n        if (error.status >= 500) {\n          return throwError(() => new Error('Server error. Please try again later.'));\n        }\n        // Default error message\n        const errorMessage = ((_c = error.error) === null || _c === void 0 ? void 0 : _c.message) || error.statusText || 'Something went wrong';\n        return throwError(() => new Error(errorMessage));\n      }));\n    }\n  }\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AccountService));\n  };\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}