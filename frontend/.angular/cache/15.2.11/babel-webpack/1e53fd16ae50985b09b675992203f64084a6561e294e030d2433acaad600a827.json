{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../_services\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"usersChart\"];\nconst _c1 = [\"tokenChart\"];\nfunction DashboardComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"div\", 9)(2, \"span\", 10);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 11);\n    i0.ɵɵtext(5, \"Loading statistics...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DashboardComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 12)(2, \"div\", 13)(3, \"div\", 14)(4, \"div\", 15)(5, \"div\", 16)(6, \"div\", 17);\n    i0.ɵɵtext(7, \" Total Users\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 18);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\", 19);\n    i0.ɵɵelement(11, \"i\", 20);\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(12, \"div\", 12)(13, \"div\", 21)(14, \"div\", 14)(15, \"div\", 15)(16, \"div\", 16)(17, \"div\", 22);\n    i0.ɵɵtext(18, \" Active Users\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"div\", 18);\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(21, \"div\", 19);\n    i0.ɵɵelement(22, \"i\", 23);\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(23, \"div\", 12)(24, \"div\", 24)(25, \"div\", 14)(26, \"div\", 15)(27, \"div\", 16)(28, \"div\", 25);\n    i0.ɵɵtext(29, \" Verified Users\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(30, \"div\", 18);\n    i0.ɵɵtext(31);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(32, \"div\", 19);\n    i0.ɵɵelement(33, \"i\", 26);\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(34, \"div\", 12)(35, \"div\", 27)(36, \"div\", 14)(37, \"div\", 15)(38, \"div\", 16)(39, \"div\", 28);\n    i0.ɵɵtext(40, \" Online Users\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(41, \"div\", 18);\n    i0.ɵɵtext(42);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(43, \"div\", 19);\n    i0.ɵɵelement(44, \"i\", 29);\n    i0.ɵɵelementEnd()()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate(ctx_r1.totalUsers);\n    i0.ɵɵadvance(11);\n    i0.ɵɵtextInterpolate(ctx_r1.activeUsers);\n    i0.ɵɵadvance(11);\n    i0.ɵɵtextInterpolate(ctx_r1.verifiedUsers);\n    i0.ɵɵadvance(11);\n    i0.ɵɵtextInterpolate(ctx_r1.onlineUsers);\n  }\n}\nfunction DashboardComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30)(1, \"div\", 31)(2, \"div\", 32)(3, \"div\", 33)(4, \"h6\", 34);\n    i0.ɵɵtext(5, \"User Registrations\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 14)(7, \"div\", 35);\n    i0.ɵɵelement(8, \"canvas\", 36, 37);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\", 38);\n    i0.ɵɵtext(11, \" Monthly user registration statistics \");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(12, \"div\", 39)(13, \"div\", 32)(14, \"div\", 33)(15, \"h6\", 34);\n    i0.ɵɵtext(16, \"Active Sessions\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"div\", 14)(18, \"div\", 40);\n    i0.ɵɵelement(19, \"canvas\", 41, 42);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"p\", 38);\n    i0.ɵɵtext(22, \" Current active user sessions with valid refresh tokens \");\n    i0.ɵɵelementEnd()()()()();\n  }\n}\nfunction DashboardComponent_div_10_tr_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r7 = ctx.$implicit;\n    i0.ɵɵclassProp(\"table-active\", item_r7.isCurrent);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r7.month);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r7.count);\n  }\n}\nfunction DashboardComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30)(1, \"div\", 2)(2, \"div\", 32)(3, \"div\", 43)(4, \"h6\", 34);\n    i0.ɵɵtext(5, \"Monthly Registration Data\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 14)(7, \"div\", 44)(8, \"table\", 45)(9, \"thead\")(10, \"tr\")(11, \"th\");\n    i0.ɵɵtext(12, \"Month\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"th\");\n    i0.ɵɵtext(14, \"New Registrations\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(15, \"tbody\");\n    i0.ɵɵtemplate(16, DashboardComponent_div_10_tr_16_Template, 5, 4, \"tr\", 46);\n    i0.ɵɵelementEnd()()()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(16);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.monthlyRegistrations);\n  }\n}\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(accountService) {\n      this.accountService = accountService;\n      this.totalUsers = 0;\n      this.activeUsers = 0;\n      this.onlineUsers = 0;\n      this.verifiedUsers = 0;\n      this.monthlyRegistrations = [];\n      this.refreshTokens = 0;\n      this.loading = true;\n      this.subscriptions = [];\n    }\n    ngOnInit() {\n      this.loadStats();\n    }\n    ngAfterViewInit() {\n      setTimeout(() => this.initCharts(), 500);\n    }\n    ngOnDestroy() {\n      // Unsubscribe from all subscriptions\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n    loadStats() {\n      this.accountService.getUserStats().pipe(first()).subscribe(stats => {\n        this.totalUsers = stats.totalUsers;\n        this.activeUsers = stats.activeUsers;\n        this.onlineUsers = stats.onlineUsers;\n        this.verifiedUsers = stats.verifiedUsers;\n        this.refreshTokens = stats.refreshTokenCount;\n        this.monthlyRegistrations = stats.monthlyData;\n        this.loading = false;\n        // Initialize charts after data is loaded\n        this.initCharts();\n      });\n    }\n    initCharts() {\n      if (this.usersChartRef && this.usersChartRef.nativeElement) {\n        const ctx = this.usersChartRef.nativeElement.getContext('2d');\n        // Create a gradient background for the line\n        const gradient = ctx.createLinearGradient(0, 0, 0, 400);\n        gradient.addColorStop(0, 'rgba(54, 162, 235, 0.7)');\n        gradient.addColorStop(1, 'rgba(54, 162, 235, 0.1)');\n        this.usersChart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: this.monthlyRegistrations.map(item => item.month),\n            datasets: [{\n              label: 'New Users',\n              data: this.monthlyRegistrations.map(item => item.count),\n              backgroundColor: gradient,\n              borderColor: 'rgba(54, 162, 235, 1)',\n              borderWidth: 2,\n              pointBackgroundColor: this.monthlyRegistrations.map(item => item.isCurrent ? 'rgba(54, 162, 235, 1)' : 'rgba(54, 162, 235, 0.7)'),\n              pointRadius: this.monthlyRegistrations.map(item => item.isCurrent ? 5 : 3),\n              tension: 0.4,\n              fill: true\n            }]\n          },\n          options: {\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                enabled: true,\n                mode: 'index',\n                intersect: false,\n                backgroundColor: 'rgba(0, 0, 0, 0.7)',\n                titleColor: '#fff',\n                bodyColor: '#fff',\n                titleFont: {\n                  size: 14\n                },\n                bodyFont: {\n                  size: 14\n                },\n                padding: 12,\n                displayColors: false\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                grid: {\n                  color: 'rgba(200, 200, 200, 0.1)'\n                },\n                ticks: {\n                  color: '#6c757d'\n                }\n              },\n              x: {\n                grid: {\n                  display: false\n                },\n                ticks: {\n                  color: '#6c757d'\n                }\n              }\n            },\n            responsive: true,\n            maintainAspectRatio: false\n          }\n        });\n      }\n      if (this.tokenChartRef && this.tokenChartRef.nativeElement) {\n        const ctx = this.tokenChartRef.nativeElement.getContext('2d');\n        this.tokensChart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: ['Active Sessions', 'Inactive'],\n            datasets: [{\n              data: [this.refreshTokens, this.totalUsers - this.refreshTokens],\n              backgroundColor: ['rgba(54, 162, 235, 0.8)', 'rgba(220, 220, 220, 0.8)'],\n              borderColor: ['rgba(54, 162, 235, 1)', 'rgba(220, 220, 220, 1)'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            plugins: {\n              legend: {\n                position: 'bottom',\n                labels: {\n                  padding: 20,\n                  boxWidth: 12,\n                  color: '#6c757d'\n                }\n              }\n            },\n            cutout: '70%',\n            responsive: true,\n            maintainAspectRatio: false\n          }\n        });\n      }\n    }\n    updateCharts() {\n      if (this.usersChart) {\n        this.usersChart.update();\n      }\n      if (this.tokensChart) {\n        this.tokensChart.data.datasets[0].data = [this.refreshTokens, this.totalUsers - this.refreshTokens];\n        this.tokensChart.update();\n      }\n    }\n  }\n  DashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.AccountService));\n  };\n  DashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    viewQuery: function DashboardComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.usersChartRef = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tokenChartRef = _t.first);\n      }\n    },\n    decls: 11,\n    vars: 4,\n    consts: [[1, \"container-fluid\", \"p-1\"], [1, \"row\", \"mb-4\"], [1, \"col-12\"], [1, \"h3\", \"mb-0\", \"text-gray-800\"], [1, \"text-muted\"], [\"class\", \"text-center my-5\", 4, \"ngIf\"], [\"class\", \"row mb-4\", 4, \"ngIf\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"text-center\", \"my-5\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"mt-2\"], [1, \"col-xl-3\", \"col-md-6\", \"mb-4\"], [1, \"card\", \"border-left-primary\", \"shadow\", \"h-100\", \"py-2\"], [1, \"card-body\"], [1, \"row\", \"no-gutters\", \"align-items-center\"], [1, \"col\", \"mr-2\"], [1, \"text-xs\", \"font-weight-bold\", \"text-primary\", \"text-uppercase\", \"mb-1\"], [1, \"h5\", \"mb-0\", \"font-weight-bold\", \"text-gray-800\"], [1, \"col-auto\"], [1, \"fas\", \"fa-users\", \"fa-2x\", \"text-gray-300\"], [1, \"card\", \"border-left-success\", \"shadow\", \"h-100\", \"py-2\"], [1, \"text-xs\", \"font-weight-bold\", \"text-success\", \"text-uppercase\", \"mb-1\"], [1, \"fas\", \"fa-user-check\", \"fa-2x\", \"text-gray-300\"], [1, \"card\", \"border-left-info\", \"shadow\", \"h-100\", \"py-2\"], [1, \"text-xs\", \"font-weight-bold\", \"text-info\", \"text-uppercase\", \"mb-1\"], [1, \"fas\", \"fa-check-circle\", \"fa-2x\", \"text-gray-300\"], [1, \"card\", \"border-left-warning\", \"shadow\", \"h-100\", \"py-2\"], [1, \"text-xs\", \"font-weight-bold\", \"text-warning\", \"text-uppercase\", \"mb-1\"], [1, \"fas\", \"fa-signal\", \"fa-2x\", \"text-gray-300\"], [1, \"row\"], [1, \"col-xl-8\", \"col-lg-7\"], [1, \"card\", \"shadow\", \"mb-4\"], [1, \"card-header\", \"py-3\", \"d-flex\", \"flex-row\", \"align-items-center\", \"justify-content-between\"], [1, \"m-0\", \"font-weight-bold\", \"text-primary\"], [1, \"chart-area\"], [\"height\", \"300\"], [\"usersChart\", \"\"], [1, \"mt-3\", \"mb-0\", \"text-muted\", \"text-center\", \"small\"], [1, \"col-xl-4\", \"col-lg-5\"], [1, \"chart-pie\", \"pt-2\"], [\"height\", \"250\"], [\"tokenChart\", \"\"], [1, \"card-header\", \"py-3\"], [1, \"table-responsive\"], [\"width\", \"100%\", \"cellspacing\", \"0\", 1, \"table\", \"table-bordered\"], [3, \"table-active\", 4, \"ngFor\", \"ngForOf\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h1\", 3);\n        i0.ɵɵtext(4, \"Dashboard\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"p\", 4);\n        i0.ɵɵtext(6, \"Overview of user statistics and system analytics\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(7, DashboardComponent_div_7_Template, 6, 0, \"div\", 5);\n        i0.ɵɵtemplate(8, DashboardComponent_div_8_Template, 45, 4, \"div\", 6);\n        i0.ɵɵtemplate(9, DashboardComponent_div_9_Template, 23, 0, \"div\", 7);\n        i0.ɵɵtemplate(10, DashboardComponent_div_10_Template, 17, 1, \"div\", 7);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf],\n    encapsulation: 2\n  });\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}