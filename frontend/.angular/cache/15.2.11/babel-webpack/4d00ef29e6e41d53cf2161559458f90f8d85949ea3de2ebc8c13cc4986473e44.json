{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, Observable, catchError, throwError } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      const storedAccount = localStorage.getItem('account');\n      this.accountSubject = new BehaviorSubject(storedAccount ? JSON.parse(storedAccount) : null);\n      this.account = this.accountSubject.asObservable();\n    }\n    get accountValue() {\n      return this.accountSubject.value;\n    }\n    getHttpOptions() {\n      const account = this.accountValue;\n      if (!(account === null || account === void 0 ? void 0 : account.jwtToken)) {\n        this.cleanupAndRedirect();\n        return {};\n      }\n      return {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${account.jwtToken}`,\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n          'Access-Control-Allow-Headers': 'Origin, Content-Type, Accept, Authorization'\n        }),\n        withCredentials: true\n      };\n    }\n    login(email, password) {\n      return this.http.post(`${baseUrl}/authenticate`, {\n        email,\n        password\n      }).pipe(map(account => {\n        if (!account || !account.jwtToken) {\n          throw new Error('Invalid login response');\n        }\n        this.accountSubject.next(account);\n        localStorage.setItem('account', JSON.stringify(account));\n        this.startRefreshTokenTimer();\n        return account;\n      }), catchError(error => {\n        console.error('Login failed:', error);\n        return throwError(() => error);\n      }));\n    }\n    logout() {\n      var _a;\n      const refreshToken = (_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.refreshToken;\n      if (refreshToken) {\n        // First try to revoke the token\n        this.http.post(`${baseUrl}/revoke-token`, {\n          token: refreshToken\n        }).subscribe({\n          next: () => {\n            this.cleanupAndRedirect();\n          },\n          error: error => {\n            console.error('Token revocation failed:', error);\n            // Even if revocation fails, we should still clean up and redirect\n            this.cleanupAndRedirect();\n          }\n        });\n      } else {\n        this.cleanupAndRedirect();\n      }\n    }\n    cleanupAndRedirect() {\n      this.stopRefreshTokenTimer();\n      this.accountSubject.next(null);\n      localStorage.removeItem('account');\n      this.router.navigate(['/account/login']);\n    }\n    refreshToken() {\n      var _a;\n      const refreshToken = (_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.refreshToken;\n      if (!refreshToken) {\n        this.cleanupAndRedirect();\n        return new Observable();\n      }\n      return this.http.post(`${baseUrl}/refresh-token`, {\n        token: refreshToken\n      }).pipe(map(account => {\n        if (!account || !account.jwtToken) {\n          throw new Error('Invalid refresh token response');\n        }\n        this.accountSubject.next(account);\n        localStorage.setItem('account', JSON.stringify(account));\n        this.startRefreshTokenTimer();\n        return account;\n      }), catchError(error => {\n        console.error('Token refresh failed:', error);\n        this.cleanupAndRedirect();\n        return throwError(() => error);\n      }));\n    }\n    register(account) {\n      return this.http.post(`${baseUrl}/register`, account, this.getHttpOptions());\n    }\n    verifyEmail(token) {\n      return this.http.post(`${baseUrl}/verify-email`, {\n        token\n      }, this.getHttpOptions());\n    }\n    forgotPassword(email) {\n      return this.http.post(`${baseUrl}/forgot-password`, {\n        email\n      }, this.getHttpOptions());\n    }\n    validateResetToken(token) {\n      return this.http.post(`${baseUrl}/validate-reset-token`, {\n        token\n      }, this.getHttpOptions());\n    }\n    resetPassword(token, password, confirmPassword) {\n      return this.http.post(`${baseUrl}/reset-password`, {\n        token,\n        password,\n        confirmPassword\n      }, this.getHttpOptions());\n    }\n    getAll() {\n      return this.http.get(baseUrl, this.getHttpOptions());\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`, this.getHttpOptions());\n    }\n    create(params) {\n      return this.http.post(baseUrl, params, this.getHttpOptions());\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params, this.getHttpOptions()).pipe(map(account => {\n        var _a;\n        if (account.id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          account = Object.assign(Object.assign({}, this.accountValue), account);\n          this.accountSubject.next(account);\n          localStorage.setItem('account', JSON.stringify(account));\n        }\n        return account;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`, this.getHttpOptions()).pipe(finalize(() => {\n        var _a;\n        if (id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          this.logout();\n        }\n      }));\n    }\n    startRefreshTokenTimer() {\n      const account = this.accountValue;\n      if (!(account === null || account === void 0 ? void 0 : account.jwtToken)) {\n        this.logout();\n        return;\n      }\n      try {\n        const jwtToken = JSON.parse(atob(account.jwtToken.split('.')[1]));\n        const expires = new Date(jwtToken.exp * 1000);\n        const timeout = expires.getTime() - Date.now() - 60 * 1000;\n        if (timeout <= 0) {\n          this.logout();\n          return;\n        }\n        this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n      } catch (error) {\n        console.error('Error parsing JWT token:', error);\n        this.logout();\n      }\n    }\n    stopRefreshTokenTimer() {\n      clearTimeout(this.refreshTokenTimeout);\n    }\n  }\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}