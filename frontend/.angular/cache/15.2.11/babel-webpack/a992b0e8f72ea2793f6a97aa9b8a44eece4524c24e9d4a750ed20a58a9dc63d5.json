{"ast":null,"code":"import { throwError, BehaviorSubject } from 'rxjs';\nimport { catchError, filter, take, switchMap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../app/_services\";\nexport let JwtInterceptor = /*#__PURE__*/(() => {\n  class JwtInterceptor {\n    constructor(accountService) {\n      this.accountService = accountService;\n      this.isRefreshing = false;\n      this.refreshTokenSubject = new BehaviorSubject(null);\n    }\n    intercept(request, next) {\n      // add auth header with jwt if account is logged in and request is to the api url\n      const account = this.accountService.accountValue;\n      const isLoggedIn = account === null || account === void 0 ? void 0 : account.jwtToken;\n      const isApiUrl = request.url.startsWith(environment.apiUrl);\n      const isRefreshTokenRequest = request.url.includes('/refresh-token');\n      const isRevokeTokenRequest = request.url.includes('/revoke-token');\n      const isAuthenticateRequest = request.url.includes('/authenticate');\n      // Don't add token to refresh token, revoke token, or authenticate requests\n      if (isLoggedIn && isApiUrl && !isRefreshTokenRequest && !isRevokeTokenRequest && !isAuthenticateRequest) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${account.jwtToken}`\n          }\n        });\n      }\n      return next.handle(request).pipe(catchError(error => {\n        if (error.status === 401 && !isRefreshTokenRequest && !isRevokeTokenRequest && !isAuthenticateRequest) {\n          return this.handle401Error(request, next);\n        }\n        return throwError(() => error);\n      }));\n    }\n    handle401Error(request, next) {\n      if (!this.isRefreshing) {\n        this.isRefreshing = true;\n        this.refreshTokenSubject.next(null);\n        return this.accountService.refreshToken().pipe(switchMap(account => {\n          this.isRefreshing = false;\n          this.refreshTokenSubject.next(account);\n          return next.handle(this.addTokenHeader(request, account.jwtToken));\n        }), catchError(err => {\n          this.isRefreshing = false;\n          this.accountService.logout();\n          return throwError(() => err);\n        }));\n      }\n      return this.refreshTokenSubject.pipe(filter(token => token != null), take(1), switchMap(account => next.handle(this.addTokenHeader(request, account.jwtToken))));\n    }\n    addTokenHeader(request, token) {\n      return request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n  }\n  JwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService));\n  };\n  JwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n  return JwtInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}