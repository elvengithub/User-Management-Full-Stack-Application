{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { first } from 'rxjs/operators';\nlet DashboardComponent = class DashboardComponent {\n  constructor(accountService, socketService) {\n    this.accountService = accountService;\n    this.socketService = socketService;\n    this.totalUsers = 0;\n    this.activeUsers = 0;\n    this.onlineUsers = 0;\n    this.verifiedUsers = 0;\n    this.monthlyRegistrations = [];\n    this.refreshTokens = 0;\n    this.loading = true;\n    this.subscriptions = [];\n  }\n  ngOnInit() {\n    this.loadStats();\n    // Connect to \"socket\"\n    this.socketService.connect();\n    // Subscribe to real-time updates\n    this.subscriptions.push(this.socketService.getOnlineUsers().subscribe(users => {\n      if (users.length > 0) {\n        this.onlineUsers = users.filter(u => u.isOnline).length;\n        // Update the chart if it exists\n        this.updateCharts();\n      }\n    }));\n  }\n  ngAfterViewInit() {\n    setTimeout(() => this.initCharts(), 500);\n  }\n  ngOnDestroy() {\n    // Disconnect socket\n    this.socketService.disconnect();\n    // Unsubscribe from all subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n  loadStats() {\n    this.accountService.getUserStats().pipe(first()).subscribe(stats => {\n      this.totalUsers = stats.totalUsers;\n      this.activeUsers = stats.activeUsers;\n      this.onlineUsers = stats.onlineUsers;\n      this.verifiedUsers = stats.verifiedUsers;\n      this.refreshTokens = stats.refreshTokenCount;\n      this.monthlyRegistrations = stats.monthlyData;\n      // Initialize socket service with user data\n      this.accountService.getOnlineUsers().pipe(first()).subscribe(users => {\n        this.socketService.updateOnlineUsers(users);\n        // Update registration stats in socket service\n        this.socketService.updateRegistrationStats({\n          monthlyData: this.monthlyRegistrations,\n          totalRegistrations: this.totalUsers\n        });\n      });\n      this.loading = false;\n      // Initialize charts after data is loaded\n      this.initCharts();\n    });\n  }\n  initCharts() {\n    if (this.usersChartRef && this.usersChartRef.nativeElement) {\n      const ctx = this.usersChartRef.nativeElement.getContext('2d');\n      // Create a gradient background for the line\n      const gradient = ctx.createLinearGradient(0, 0, 0, 400);\n      gradient.addColorStop(0, 'rgba(54, 162, 235, 0.7)');\n      gradient.addColorStop(1, 'rgba(54, 162, 235, 0.1)');\n      this.usersChart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: this.monthlyRegistrations.map(item => item.month),\n          datasets: [{\n            label: 'New Users',\n            data: this.monthlyRegistrations.map(item => item.count),\n            backgroundColor: gradient,\n            borderColor: 'rgba(54, 162, 235, 1)',\n            borderWidth: 2,\n            pointBackgroundColor: this.monthlyRegistrations.map(item => item.isCurrent ? 'rgba(54, 162, 235, 1)' : 'rgba(54, 162, 235, 0.7)'),\n            pointRadius: this.monthlyRegistrations.map(item => item.isCurrent ? 5 : 3),\n            tension: 0.4,\n            fill: true\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              enabled: true,\n              mode: 'index',\n              intersect: false,\n              backgroundColor: 'rgba(0, 0, 0, 0.7)',\n              titleColor: '#fff',\n              bodyColor: '#fff',\n              titleFont: {\n                size: 14\n              },\n              bodyFont: {\n                size: 14\n              },\n              padding: 12,\n              displayColors: false\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              grid: {\n                color: 'rgba(200, 200, 200, 0.1)'\n              },\n              ticks: {\n                color: '#6c757d'\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              },\n              ticks: {\n                color: '#6c757d'\n              }\n            }\n          },\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      });\n    }\n    if (this.tokenChartRef && this.tokenChartRef.nativeElement) {\n      const ctx = this.tokenChartRef.nativeElement.getContext('2d');\n      this.tokensChart = new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: ['Active Sessions', 'Inactive'],\n          datasets: [{\n            data: [this.refreshTokens, this.totalUsers - this.refreshTokens],\n            backgroundColor: ['rgba(54, 162, 235, 0.8)', 'rgba(220, 220, 220, 0.8)'],\n            borderColor: ['rgba(54, 162, 235, 1)', 'rgba(220, 220, 220, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              position: 'bottom',\n              labels: {\n                padding: 20,\n                boxWidth: 12,\n                color: '#6c757d'\n              }\n            }\n          },\n          cutout: '70%',\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      });\n    }\n  }\n  updateCharts() {\n    if (this.tokensChart) {\n      // Update the active sessions data\n      this.tokensChart.data.datasets[0].data = [this.refreshTokens, this.totalUsers - this.refreshTokens];\n      this.tokensChart.update();\n    }\n  }\n};\n__decorate([ViewChild('usersChart')], DashboardComponent.prototype, \"usersChartRef\", void 0);\n__decorate([ViewChild('tokenChart')], DashboardComponent.prototype, \"tokenChartRef\", void 0);\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: 'dashboard.component.html'\n})], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}