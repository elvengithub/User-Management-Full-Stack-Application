{"ast":null,"code":"import { BehaviorSubject, Subject, interval } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let SocketService = /*#__PURE__*/(() => {\n  class SocketService {\n    constructor() {\n      this.onlineUsers = new BehaviorSubject([]);\n      this.registrationStats = new BehaviorSubject({\n        monthlyData: [],\n        totalRegistrations: 0\n      });\n      this.userStatusUpdates = new Subject();\n      this.isConnected = false;\n    }\n    // Simulate connecting to a WebSocket\n    connect() {\n      if (this.isConnected) return;\n      console.log('Socket connecting...');\n      this.isConnected = true;\n      // Simulate periodic updates (in a real app, this would be actual socket events)\n      this.simulationInterval = interval(5000).subscribe(() => {\n        this.simulateStatusChanges();\n      });\n    }\n    // Simulate disconnecting from a WebSocket\n    disconnect() {\n      if (!this.isConnected) return;\n      console.log('Socket disconnecting...');\n      this.isConnected = false;\n      if (this.simulationInterval) {\n        this.simulationInterval.unsubscribe();\n      }\n    }\n    // Update online users from backend\n    updateOnlineUsers(users) {\n      this.onlineUsers.next(users);\n    }\n    // Update registration stats\n    updateRegistrationStats(stats) {\n      this.registrationStats.next(stats);\n    }\n    // Get online users as observable\n    getOnlineUsers() {\n      return this.onlineUsers.asObservable();\n    }\n    // Get registration stats as observable\n    getRegistrationStats() {\n      return this.registrationStats.asObservable();\n    }\n    // Get single user status changes\n    getUserStatusUpdates() {\n      return this.userStatusUpdates.asObservable();\n    }\n    // Simulate random status changes\n    simulateStatusChanges() {\n      const currentUsers = this.onlineUsers.value;\n      if (currentUsers.length === 0) return;\n      // Pick a random user to toggle status\n      const randomIndex = Math.floor(Math.random() * currentUsers.length);\n      const user = currentUsers[randomIndex];\n      if (user) {\n        user.isOnline = !user.isOnline;\n        user.lastActive = new Date();\n        // Update the users list\n        this.onlineUsers.next([...currentUsers]);\n        // Emit a status change event\n        this.userStatusUpdates.next({\n          userId: user.id,\n          isOnline: user.isOnline\n        });\n        console.log(`User ${user.firstName} ${user.lastName} is now ${user.isOnline ? 'online' : 'offline'}`);\n      }\n    }\n    // Helper method to get current online count\n    getOnlineCount() {\n      return this.onlineUsers.pipe(map(users => users.filter(u => u.isOnline).length));\n    }\n    // Helper method to get current offline count\n    getOfflineCount() {\n      return this.onlineUsers.pipe(map(users => users.filter(u => !u.isOnline).length));\n    }\n  }\n  SocketService.ɵfac = function SocketService_Factory(t) {\n    return new (t || SocketService)();\n  };\n  SocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SocketService,\n    factory: SocketService.ɵfac,\n    providedIn: 'root'\n  });\n  return SocketService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}