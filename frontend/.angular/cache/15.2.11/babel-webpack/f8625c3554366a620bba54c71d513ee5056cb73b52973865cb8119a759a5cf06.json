{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { interval } from 'rxjs';\nlet UsersOnlineComponent = class UsersOnlineComponent {\n  constructor(accountService) {\n    this.accountService = accountService;\n    this.accounts = [];\n    this.loading = true;\n  }\n  ngOnInit() {\n    this.loadUsers();\n    // Refresh the user list every 30 seconds to simulate real-time updates\n    // In a real app, this would use WebSockets or a real-time database\n    this.refreshSubscription = interval(30000).subscribe(() => {\n      this.loadUsers();\n    });\n  }\n  ngOnDestroy() {\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n  }\n  loadUsers() {\n    this.accountService.getOnlineUsers().pipe(first()).subscribe(accounts => {\n      // In a real app, we'd have actual online status from the backend\n      // Here we're simulating by generating random online status\n      this.accounts = accounts.map(account => Object.assign(Object.assign({}, account), {\n        isOnline: Math.random() > 0.5\n      }));\n      this.loading = false;\n    });\n  }\n  // Helper methods for the template\n  getOnlineUsersCount() {\n    return this.accounts.filter(a => a.isOnline).length;\n  }\n  getOfflineUsersCount() {\n    return this.accounts.filter(a => !a.isOnline).length;\n  }\n  getTotalUsersCount() {\n    return this.accounts.length;\n  }\n  isAdminRole(role) {\n    return role === 'Admin';\n  }\n  isUserRole(role) {\n    return role === 'User';\n  }\n};\nUsersOnlineComponent = __decorate([Component({\n  selector: 'app-users-online',\n  templateUrl: 'users-online.component.html'\n})], UsersOnlineComponent);\nexport { UsersOnlineComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}